<MudCard Class="m3-card-hover"
         Style="border-left: 2px solid var(--mud-palette-primary);"
         @onclick="HandleCardClick">
    <MudCardHeader Class="px-4 pt-2 pb-0">
        <CardHeaderContent>
            <MudText Typo="Typo.subtitle1">
                @(!string.IsNullOrEmpty(Conversation.Title) ? Conversation.Title : "Untitled Conversation")
            </MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.MoreVert"
                           Class="pa-3"
                           Color="Color.Default"
                           Size="Size.Small" />
        </CardHeaderActions>
    </MudCardHeader>

    <MudCardContent Class="px-4 pb-2 pt-0">
        @if (!string.IsNullOrEmpty(Conversation.Summary))
        {
            <MudText Typo="Typo.body2" Class="mb-3 mud-text-secondary">
                @TruncatedSummary
            </MudText>
        }
        else
        {
            <MudText Typo="Typo.body2" Class="mb-3 text-disabled fst-italic">
                No summary available
            </MudText>
        }
        <div class="d-flex flex-wrap gap-2 mb-3">
            <MudChip Size="Size.Small" T="string"
                     Variant="Variant.Outlined"
                     Icon="@Icons.Material.Outlined.Schedule">
                @Conversation.CreatedAt.ToString("MMM dd, yyyy")
            </MudChip>
            <MudChip Size="Size.Small" T="string"
                     Variant="Variant.Outlined"
                     Icon="@Icons.Material.Outlined.Timer">
                @($"{Conversation.DurationMinutes:F1} min")
            </MudChip>
            @if (!string.IsNullOrEmpty(Conversation.Location))
            {
                <MudChip Size="Size.Small" T="string"
                         Variant="Variant.Outlined"
                         Icon="@Icons.Material.Outlined.LocationOn">
                    @Conversation.Location
                </MudChip>
            }
        </div>
    </MudCardContent>

    @if (Conversation.Tags?.Any() == true)
    {
        <MudCardActions Class="pa-0">
            <div class="d-flex flex-wrap align-center gap-1">
                @foreach (var tag in Conversation.Tags.Take(3))
                {
                    <MudChip Size="Size.Small" T="string"
                             Variant="Variant.Filled"
                             Color="Color.Default">
                        @tag
                    </MudChip>
                }
                @if (Conversation.Tags.Count > 3)
                {
                    <MudText Typo="Typo.caption" Class="ml-1 mud-text-secondary">
                        +@(Conversation.Tags.Count - 3) more
                    </MudText>
                }
            </div>
        </MudCardActions>
    }
</MudCard>

@code {
    [Parameter] public Conversation Conversation { get; set; } = new();
    [Parameter] public EventCallback<Conversation> OnConversationSelected { get; set; }

    private const int SummaryMaxLength = 180;

    /// <summary>
    /// Returns a truncated version of the conversation summary.
    /// </summary>
    private string TruncatedSummary
    {
        get
        {
            if (string.IsNullOrEmpty(Conversation.Summary))
            {
                return string.Empty;
            }

            if (Conversation.Summary.Length > SummaryMaxLength)
            {
                // Truncate and add ellipsis
                return $"{Conversation.Summary.Substring(0, SummaryMaxLength)}...";
            }

            return Conversation.Summary;
        }
    }

    private async Task HandleCardClick()
    {
        if (OnConversationSelected.HasDelegate)
            await OnConversationSelected.InvokeAsync(Conversation);
    }
}