@page "/"
@implements IAsyncDisposable
@inject ISnackbar Snackbar
@inject IOrchestrationService OrchestrationService
@inject IConversationService ConversationService
@inject IInsightService InsightService

<MudStack Justify="Justify.SpaceBetween" Class="mx-2 full-height-container">
    @* Header Section *@
    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mt-4 flex-shrink-0">
        <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudIcon Icon="@(OrchestrationService.IsDeviceConnected? Icons.Material.Filled.BluetoothConnected : Icons.Material.Filled.Bluetooth)"
                     Color="@(OrchestrationService.IsDeviceConnected ? Color.Success : Color.Error)" />
            <MudText Typo="Typo.body1" Color="@(OrchestrationService.IsDeviceConnected? Color.Success: Color.Error)">
                @(OrchestrationService.IsDeviceConnected ? "Connected" : "Disconnected")
            </MudText>
        </MudStack>
        @if (OrchestrationService.IsRecording)
        {
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mr-3">
                <span class="recording-indicator"></span>
                <MudText Typo="Typo.body1" Color="Color.Error">Recording</MudText>
            </MudStack>
        }
    </MudStack>

    @* Conversation Container *@
    <div class="conversation-wrapper">
        <ConversationContainer Conversation="@OrchestrationService.CurrentConversation" />
    </div>

    @* Footer Section *@
    <MudStack Justify="Justify.SpaceEvenly" Row
              AlignItems="AlignItems.Center"
              Style="max-width: 400px; width: 100%; margin: 0 auto;"
              Class="py-4 flex-shrink-0">
        <MudButton OnClick="ToggleRecordingAsync"
                   Disabled="@OrchestrationService.IsStateChanging" Variant="Variant.Outlined"
                   StartIcon="@(OrchestrationService.IsRecording ? Icons.Material.Filled.Stop : Icons.Material.Filled.Mic)"
                   Color="@(OrchestrationService.IsRecording ? Color.Error : Color.Primary)"
                   Class="rounded-xl py-3"
                   FullWidth="true">
            @if (OrchestrationService.IsStateChanging)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>@(OrchestrationService.IsRecording ? "Stop" : "Record")</MudText>
            }
        </MudButton>
        <MudButton OnClick="GenerateInsightAsync"
                   Disabled="@_isGeneratingInsight" Variant="Variant.Outlined"
                   StartIcon="@Icons.Material.Filled.AutoAwesome"
                   Color="@Color.Secondary"
                   Class="rounded-xl py-3" FullWidth="true">
            @if (_isGeneratingInsight)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Generating</MudText>
            }
            else
            {
                <MudText>Insight</MudText>
            }
        </MudButton>
    </MudStack>
</MudStack>

@code {
    #region Fields

    private bool _isGeneratingInsight;
    private readonly CancellationTokenSource _cts = new();
    private bool _isDesktop
    {
        get
        {
            return (DeviceInfo.Platform == DevicePlatform.WinUI ||
                    DeviceInfo.Platform == DevicePlatform.macOS);
        }
    }

    #endregion

    #region Lifecycle Methods

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (_isDesktop)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        }

        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        }
        Snackbar.Configuration.ShowTransitionDuration = 500;
        // Subscribe to state changes from the orchestration service.
        OrchestrationService.ConversationCompleted += OnConversationCompleted;
        OrchestrationService.StateHasChanged += OnStateHasChanged;
        OrchestrationService.Notify += OnNotify;
    }

    public async ValueTask DisposeAsync()
    {
        // Cancel any ongoing operations and unsubscribe from events to prevent memory leaks.
        _cts.Cancel();
        _cts.Dispose();

        OrchestrationService.ConversationCompleted -= OnConversationCompleted;
        OrchestrationService.StateHasChanged -= OnStateHasChanged;
        OrchestrationService.Notify -= OnNotify;

        // Ensure the orchestration service is properly disposed if it implements IAsyncDisposable.
        if (OrchestrationService is IAsyncDisposable disposableService)
        {
            await disposableService.DisposeAsync();
        }
    }

    #endregion

    #region UI Event Handlers

    private async Task ToggleRecordingAsync()
    {
        if (OrchestrationService.IsRecording)
        {
            await OrchestrationService.StopAsync();
        }
        else
        {
            await OrchestrationService.StartAsync();
        }
    }

    private async Task GenerateInsightAsync()
    {
        var conversation = OrchestrationService.CurrentConversation;
        if (conversation is null || !conversation.Transcript.Any())
        {
            Snackbar.Add("There is no transcript content to generate insights from.", Severity.Info);
            return;
        }

        _isGeneratingInsight = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            await InsightService.GenerateAndApplyInsightAsync(conversation, _cts.Token);
        }
        catch (OperationCanceledException)
        {
            Snackbar.Add("Insight generation was canceled.", Severity.Warning);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to generate insight: {ex.Message}", Severity.Error);
        }
        finally
        {
            Snackbar.Add($"Insight successfully generated", Severity.Success);
            _isGeneratingInsight = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    #endregion

    #region Service Event Handlers

    private void OnStateHasChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnNotify(object? sender, (string message, Severity severity) args)
    {
        Snackbar.Add(args.message, args.severity);
    }

    /// <summary>
    /// Handles the completion of a conversation, triggers insight generation and saving.
    /// </summary>
    private async void OnConversationCompleted(object? sender, EventArgs e)
    {
        try
        {
            // First, generate the AI insight for the completed conversation.
            await GenerateInsightAsync();

            // Next, save the conversation with the generated insights.
            var conversation = OrchestrationService.CurrentConversation;
            if (conversation != null)
            {
                await ConversationService.SaveConversationAsync(conversation);
                Snackbar.Add("Conversation saved successfully.", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"A critical error occurred during conversation finalization: {ex.Message}", Severity.Error);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    #endregion
}